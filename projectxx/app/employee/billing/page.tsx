"use client";
import React, { useEffect, useState } from "react";
import ProtectedRoute from "../../components/ProtectedRoute";

const API_BASE = "http://localhost:4000";

export default function BillingPage() {
  const [billings, setBillings] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchBillings = async () => {
      setLoading(true);
      setError(null);
      try {
        const token = typeof window !== "undefined" ? localStorage.getItem("token") : null;
        const res = await fetch(`${API_BASE}/api/employee/billing`, {
          headers: {
            Authorization: token ? `Bearer ${token}` : "",
          },
        });
        if (!res.ok) throw new Error("Failed to fetch billing records");
        const data = await res.json();
        setBillings(data.billings || []);
      } catch (err: any) {
        setError(err.message || "Unknown error");
      } finally {
        setLoading(false);
      }
    };
    fetchBillings();
  }, []);

  return (
    <ProtectedRoute requiredRole="EMPLOYEE">
      <div className="flex flex-col items-center justify-center min-h-[60vh] w-full px-4">
        <h2 className="text-3xl font-semibold mb-6">Completed Billings</h2>
        {loading ? (
          <p>Loading billing records...</p>
        ) : error ? (
          <p className="text-red-500">{error}</p>
        ) : billings.length === 0 ? (
          <p>No completed billings found for your warehouse.</p>
        ) : (
          <div className="w-full max-w-3xl space-y-4">
            {billings.map((billing: any) => (
              <div key={billing.id} className="border rounded-lg p-4 shadow bg-white">
                <div className="flex flex-col md:flex-row md:justify-between md:items-center">
                  <div>
                    <div className="font-bold text-lg">{billing.itemRequest?.itemName || "Unknown Item"} (x{billing.itemRequest?.quantity || "?"})</div>
                    <div className="text-gray-600 text-sm">Warehouse: {billing.warehouse?.name || "Unknown"}</div>
                    <div className="text-gray-600 text-sm">Generated by: {billing.generatedBy?.name || "Unknown"}</div>
                  </div>
                  <div className="mt-2 md:mt-0 flex flex-col items-end gap-2">
                    <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded mb-1">Fulfilled: {billing.generatedAt ? new Date(billing.generatedAt).toLocaleString() : "-"}</span>
                    <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded mb-1">Amount: {billing.amount}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </ProtectedRoute>
  );
} 