// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  VENDOR
  EMPLOYEE
  ADMIN
}

enum OrderStatus {
  PENDING
  APPROVED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  DELIVERED
}

enum InventoryLocation {
  TRANSIT
  PRESENT
  BUFFER
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  role       Role
  vendor     Vendor?  @relation(fields: [vendorId], references: [id])
  vendorId   String?  @unique
  employee   WalmartEmployee? @relation(fields: [employeeId], references: [id])
  employeeId String?  @unique
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  vendorAssignments   Assignment[] @relation("VendorAssignments")
  employeeAssignments Assignment[] @relation("EmployeeAssignments")
  latitude   Float?
  longitude  Float?
  isBanned Boolean @default(false)
}

model Vendor {
  id      String @id @default(cuid())
  name    String
  contact String
  user    User?
  orders  Order[]
  vendorInventories VendorInventory[] @relation("VendorVendorInventories")
  vendorTransitInventories VendorTransitInventory[] @relation("VendorVendorTransitInventories")
  offers  Offer[]
  routeDistances RouteDistance[]
}

model WalmartEmployee {
  id       String @id @default(cuid())
  name     String
  position String
  user     User?
  billingRecords BillingRecord[]
  warehouse   Warehouse? @relation("EmployeeWarehouse", fields: [warehouseId], references: [id])
  warehouseId String?
  warehouseLogs WarehouseLog[]
  itemRequests ItemRequest[]
}

model Order {
  id          String      @id @default(cuid())
  vendor      Vendor      @relation(fields: [vendorId], references: [id])
  vendorId    String
  createdAt   DateTime    @default(now())
  status      OrderStatus
  items       OrderItem[]
  totalAmount Float
  deliveries  Delivery[]
  billingRecords BillingRecord[]
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  itemName  String
  quantity  Int
  unitPrice Float
}

model Delivery {
  id           String         @id @default(cuid())
  order        Order          @relation(fields: [orderId], references: [id])
  orderId      String
  status       DeliveryStatus
  deliveryDate DateTime
  truckId      String?
}

model InventoryItem {
  id    Int    @id @default(autoincrement())
  name  String
  price Float
}

model BillingRecord {
  id             String           @id @default(cuid())
  order          Order?           @relation(fields: [orderId], references: [id])
  orderId        String?
  generatedBy    WalmartEmployee  @relation(fields: [generatedById], references: [id])
  generatedById  String
  amount         Float
  generatedAt    DateTime         @default(now())
  warehouse      Warehouse        @relation(fields: [warehouseId], references: [id])
  warehouseId    String
  itemRequest    ItemRequest?     @relation(fields: [itemRequestId], references: [id])
  itemRequestId  String?
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  timestamp  DateTime @default(now())
  isRead     Boolean  @default(false)

  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Assignment {
  id         String @id @default(cuid())
  vendorId   String
  employeeId String

  vendor     User   @relation("VendorAssignments", fields: [vendorId], references: [id])
  employee   User   @relation("EmployeeAssignments", fields: [employeeId], references: [id])

  @@unique([vendorId, employeeId])
}

model Warehouse {
  id        String   @id @default(cuid())
  name      String
  latitude  Float
  longitude Float
  transitInventories VendorTransitInventory[] @relation("WarehouseTransitInventories")
  warehouseInventories WarehouseInventory[] @relation("WarehouseWarehouseInventories")
  walmartEmployees WalmartEmployee[] @relation("EmployeeWarehouse")
  warehouseLogs WarehouseLog[]
  itemRequests ItemRequest[]
  offers Offer[]
  billingRecords BillingRecord[]
  routeDistances RouteDistance[]
}

model VendorInventory {
  id         String   @id @default(cuid())
  vendor     Vendor  @relation("VendorVendorInventories", fields: [vendorId], references: [id])
  vendorId   String
  itemName   String
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model VendorTransitInventory {
  id          String     @id @default(cuid())
  vendor      Vendor     @relation("VendorVendorTransitInventories", fields: [vendorId], references: [id])
  vendorId    String
  warehouse   Warehouse  @relation("WarehouseTransitInventories", fields: [warehouseId], references: [id])
  warehouseId String
  itemName    String
  quantity    Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model WarehouseInventory {
  id          String     @id @default(cuid())
  warehouse   Warehouse  @relation("WarehouseWarehouseInventories", fields: [warehouseId], references: [id])
  warehouseId String
  itemName    String
  quantity    Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([warehouseId, itemName])
}

model WarehouseLog {
  id           String   @id @default(cuid())
  employee     WalmartEmployee @relation(fields: [employeeId], references: [id])
  employeeId   String
  warehouse    Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId  String
  signinTime   DateTime
  signoutTime  DateTime?
}

model ItemRequest {
  id          String   @id @default(cuid())
  employee    WalmartEmployee @relation(fields: [employeeId], references: [id])
  employeeId  String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String
  itemName    String
  quantity    Int
  createdAt   DateTime @default(now())
  offers      Offer[]
  status      ItemRequestStatus @default(PENDING)
  billingRecords BillingRecord[]
}

enum ItemRequestStatus {
  PENDING
  FULFILLED
}

model Offer {
  id           String   @id @default(cuid())
  vendor       Vendor   @relation(fields: [vendorId], references: [id])
  vendorId     String
  itemRequest  ItemRequest @relation(fields: [itemRequestId], references: [id])
  itemRequestId String
  warehouse    Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId  String
  quantity     Int
  price        Float
  status       OfferStatus @default(PENDING)
  createdAt    DateTime @default(now())
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  PARTIALLY_FULFILLED
}

model RouteDistance {
  id          String   @id @default(cuid())
  vendorId    String
  warehouseId String
  distance    Float    // Distance in meters
  travelTime  Float?   // Travel time in seconds (null if not calculated)
  reachable   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([vendorId, warehouseId])
}
